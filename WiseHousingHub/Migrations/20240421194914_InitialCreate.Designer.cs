// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WiseHousingHub.Data;

#nullable disable

namespace WiseHousingHub.Migrations
{
    [DbContext(typeof(WiseContext))]
    [Migration("20240421194914_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9dcba639-420e-4a0a-92dc-34afb1f40b8e",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "546da105-ac07-4327-95f8-cd20eb5d3148",
                            Name = "user",
                            NormalizedName = "user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "cf455961-7b53-4058-b494-4f332fb35c85",
                            RoleId = "9dcba639-420e-4a0a-92dc-34afb1f40b8e"
                        },
                        new
                        {
                            UserId = "4126ad94-303f-41f1-a49f-70fb91c7bf50",
                            RoleId = "546da105-ac07-4327-95f8-cd20eb5d3148"
                        },
                        new
                        {
                            UserId = "d8224d82-4bdd-4a77-807f-777a96ff8ea9",
                            RoleId = "546da105-ac07-4327-95f8-cd20eb5d3148"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WiseHousingHub.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cf455961-7b53-4058-b494-4f332fb35c85",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "163ed008-62be-4dcf-afa5-8d6603d8dd55",
                            Email = "admin@wisehousinghub.com",
                            EmailConfirmed = false,
                            FirstName = "Joe",
                            LastName = "Tester",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@WISEHOUSINGHUB.COM",
                            NormalizedUserName = "ADMIN@WISEHOUSINGHUB.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIZGA4a2XjYFTyQ8CsX16MmSr9yYqml6R3Ae8mTNLG+rf58UUecx1FqNRDh1rtpK6g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c4f78075-1fcd-4886-acd0-692756a0ca8f",
                            TwoFactorEnabled = false,
                            UserName = "admin@wisehousinghub.com"
                        },
                        new
                        {
                            Id = "4126ad94-303f-41f1-a49f-70fb91c7bf50",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2688b453-8438-4263-9e6e-f7a4a79c5756",
                            Email = "johndoe@aol.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHNDOE@AOL.COM",
                            NormalizedUserName = "JOHNDOE@AOL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMB0932TzmwTdSvvdTa/2PQC6lUrLirmKlrXzKeC07vn5gRKCYj9jY/FTdgGnECoRw==",
                            PhoneNumber = "123-456-7890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9636741a-a3f4-4b0f-92c2-1a946f9c1d9c",
                            TwoFactorEnabled = false,
                            UserName = "johndoe@aol.com"
                        },
                        new
                        {
                            Id = "d8224d82-4bdd-4a77-807f-777a96ff8ea9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "607094d9-dd83-47ed-9f0e-a5f264f1d174",
                            Email = "janesmith@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "JANESMITH@GMAIL.COM",
                            NormalizedUserName = "JANESMITH@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKdnvmyI7Ct6ax2fgVvFpiLM0TdJ1X8PiWZDI3cBYziS47y2c3gxVYznz7Xlijw/lg==",
                            PhoneNumber = "713-210-1921",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "910f5884-34ba-4958-9d35-fdbcd5c0b1d7",
                            TwoFactorEnabled = false,
                            UserName = "janesmith@gmail.com"
                        });
                });

            modelBuilder.Entity("WiseHousingHub.Models.Landlord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Landlords");
                });

            modelBuilder.Entity("WiseHousingHub.Models.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("int");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateListed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("Furnished")
                        .HasColumnType("bit");

                    b.Property<string>("ImageFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LandlordId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("LandlordId1")
                        .HasColumnType("int");

                    b.Property<string>("LeaseType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParkingSpaces")
                        .HasColumnType("int");

                    b.Property<bool>("PetsAllowed")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("SquareFeet")
                        .HasColumnType("float");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("WheelchairAccessible")
                        .HasColumnType("bit");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LandlordId");

                    b.HasIndex("LandlordId1");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "9070 Robinette Cir",
                            Bathrooms = 3,
                            Bedrooms = 3,
                            City = "Wise",
                            DateListed = new DateTime(2024, 4, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Welcome home to this beautiful manufactured 3 bedroom, 3 bathroom well maintained property. The location of this rental offers tons of conveniences. It is located close to restaurants, shopping centers, and schools. This rental looks and smells brand new on the inside. It features an open floor plan with the living room, dining room, and kitchen close together. The living room features a beautiful fireplace with gas logs. The kitchen has tons of cabinets and  a bar area. The master bedroom is very spacious with a large walk-in closet, 2 master bathrooms, and sitting area. Two additional bedrooms with walk-in closets are located on the opposite side of the rental along with a third full bath. It also features a pantry and laundry room.",
                            Furnished = true,
                            ImageFileName = "blue_trailer.jpg",
                            IsVerified = true,
                            LandlordId = "4126ad94-303f-41f1-a49f-70fb91c7bf50",
                            LeaseType = "1-Year",
                            ParkingSpaces = 2,
                            PetsAllowed = false,
                            Price = 900m,
                            SquareFeet = 1495.0,
                            State = "Virginia",
                            WheelchairAccessible = false,
                            Zip = "24293"
                        },
                        new
                        {
                            Id = 2,
                            Address = "9027 Camp Bethel Road",
                            Bathrooms = 1,
                            Bedrooms = 2,
                            City = "Wise",
                            DateListed = new DateTime(2024, 4, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Are you looking for a move in ready rental full of southern charm? With recent updates to include the windows, electrical, and roof you should have no worries! Beautiful hardwood flooring in the living room, sun room to enjoy your morning coffee, on over half an acre of land. Off to itself overlooking a horse pasture.",
                            Furnished = false,
                            ImageFileName = "green_house.jpg",
                            IsVerified = true,
                            LandlordId = "d8224d82-4bdd-4a77-807f-777a96ff8ea9",
                            LeaseType = "1-Year",
                            ParkingSpaces = 3,
                            PetsAllowed = true,
                            Price = 715m,
                            SquareFeet = 1309.0,
                            State = "Virginia",
                            WheelchairAccessible = false,
                            Zip = "24293"
                        },
                        new
                        {
                            Id = 3,
                            Address = "826 NE Hurricane Rd",
                            Bathrooms = 1,
                            Bedrooms = 3,
                            City = "Wise",
                            DateListed = new DateTime(2024, 4, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Check out this cottage-style rental with 3 bedroom and 1 bath that has been freshly remodeled. New roof, heat pump and kitchen makes this cozy little property stand out. The refurbished hard wood floors and freshly painted walls makes this rental ready to move right in. Located conveniently close to The University of Virginia's College at Wise and within walking distance to downtown Wise. Location and convenience makes this the rental for you. And the best part is out the back door just a few steps and cross the small bridge and across the creek you have a perfect place for a firepit and small gatherings.",
                            Furnished = false,
                            ImageFileName = "white_house.jpg",
                            IsVerified = true,
                            LandlordId = "d8224d82-4bdd-4a77-807f-777a96ff8ea9",
                            LeaseType = "6-Month",
                            ParkingSpaces = 1,
                            PetsAllowed = true,
                            Price = 790m,
                            SquareFeet = 1261.0,
                            State = "Virginia",
                            WheelchairAccessible = true,
                            Zip = "24293"
                        },
                        new
                        {
                            Id = 4,
                            Address = "6331 Stephens Rd",
                            Bathrooms = 2,
                            Bedrooms = 3,
                            City = "Wise",
                            DateListed = new DateTime(2024, 4, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "This rental is 3 bed, 2 bath, and 1920 sq.ft. It has an open concept layout for main living area. Large kitchen with lots of oak cabinets, large island with built-in table, patio doors open onto small deck. Adjacent den has propane gas log fireplace. Formal dining room off the kitchen opens into a large living room. Large master suite with garden tub, stand up shower, large walk-in closet. Two additional bedrooms with separate full bath. Laundry room is located off kitchen/den area adjacent to back entrance. This property has a block perimeter. There is a large area fenced separately from the yard for dogs. The front yard has a nice stream that runs all year round.",
                            Furnished = false,
                            ImageFileName = "tan_doublewide.jpg",
                            IsVerified = true,
                            LandlordId = "4126ad94-303f-41f1-a49f-70fb91c7bf50",
                            LeaseType = "1-Year",
                            ParkingSpaces = 3,
                            PetsAllowed = true,
                            Price = 820m,
                            SquareFeet = 1920.0,
                            State = "Virginia",
                            WheelchairAccessible = false,
                            Zip = "24293"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WiseHousingHub.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WiseHousingHub.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WiseHousingHub.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WiseHousingHub.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WiseHousingHub.Models.Property", b =>
                {
                    b.HasOne("WiseHousingHub.Models.ApplicationUser", "Landlord")
                        .WithMany("Properties")
                        .HasForeignKey("LandlordId");

                    b.HasOne("WiseHousingHub.Models.Landlord", null)
                        .WithMany("Properties")
                        .HasForeignKey("LandlordId1");

                    b.Navigation("Landlord");
                });

            modelBuilder.Entity("WiseHousingHub.Models.ApplicationUser", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("WiseHousingHub.Models.Landlord", b =>
                {
                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
